"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _styles = require("./styles");
var _reactNativeBackgroundTimer = _interopRequireDefault(require("react-native-background-timer"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable no-bitwise */

const defaultProps = {
  style: {},
  textStyle: {},
  onTimes: _seconds => {},
  onPause: _seconds => {},
  onEnd: _seconds => {}
};
const TimerComponent = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    initialSeconds = 0,
    style,
    textStyle,
    fontFamily,
    autoStart = false,
    formatTime = 'hh:mm:ss',
    onEnd,
    onTimes,
    onPause
  } = props;
  const interval = (0, _react.useRef)(0);
  const hours = (0, _react.useRef)(0);
  const minute = (0, _react.useRef)(0);
  const seconds = (0, _react.useRef)(0);
  const currentSeconds = (0, _react.useRef)(0);
  const [key, setKey] = (0, _react.useState)(Math.random());
  (0, _react.useImperativeHandle)(ref, () => {
    return {
      start,
      pause,
      resume,
      stop
    };
  });
  const timer = (0, _react.useCallback)(() => {
    interval.current = _reactNativeBackgroundTimer.default.setInterval(() => {
      currentSeconds.current = currentSeconds.current + 1;
      if (seconds.current < 60) {
        seconds.current = seconds.current + 1;
      } else {
        seconds.current = 0;
        minute.current = minute.current + 1;
      }
      if (minute.current === 60) {
        minute.current = 0;
        hours.current = hours.current + 1;
      }
      if (onTimes) {
        onTimes(currentSeconds.current);
      }
      setKey(Math.random());
    }, 1000);
  }, []);
  const initTime = (0, _react.useCallback)(iSeconds => {
    if (iSeconds >= 3600) {
      hours.current = ~~(iSeconds / 3600);
      const times = iSeconds % 3600;
      initTime(times);
    } else {
      if (iSeconds >= 60) {
        minute.current = ~~(iSeconds / 60);
        const times = iSeconds % 60;
        initTime(times);
      } else {
        seconds.current = iSeconds;
      }
    }
  }, []);
  const init = (0, _react.useCallback)(() => {
    currentSeconds.current = 0;
    hours.current = 0;
    minute.current = 0;
    seconds.current = 0;
    if (initialSeconds > 0) {
      initTime(initialSeconds);
    }
    setKey(Math.random());
  }, [initialSeconds]);
  const start = (0, _react.useCallback)(() => {
    init();
    if (!interval.current) {
      timer();
    }
  }, []);
  const pause = (0, _react.useCallback)(() => {
    clear();
    if (onPause) {
      onPause(currentSeconds.current);
    }
  }, []);
  const resume = () => {
    if (!interval.current) {
      timer();
    }
  };
  const stop = () => {
    if (onEnd) {
      onEnd(currentSeconds.current);
    }
    init();
    setKey(Math.random());
    clear();
  };
  const clear = () => {
    if (interval.current) {
      _reactNativeBackgroundTimer.default.clearInterval(interval.current);
      interval.current = 0;
    }
  };
  (0, _react.useEffect)(() => {
    init();
  }, [initialSeconds]);
  (0, _react.useEffect)(() => {
    return () => {
      pause();
    };
  }, []);
  (0, _react.useEffect)(() => {
    if (autoStart) {
      start();
    }
  }, [autoStart]);
  const font = () => {
    if (fontFamily) {
      return {
        fontFamily: fontFamily
      };
    } else {
      return {};
    }
  };
  const renderTimer = () => {
    if (formatTime === 'hh:mm:ss') {
      if (hours.current > 0) {
        return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
          style: [_styles.styles.text, textStyle, font()]
        }, `${hours.current}:${minute.current.toString().length === 1 ? '0' : ''}${minute.current}:${seconds.current.toString().length === 1 ? '0' : ''}${seconds.current}`);
      } else {
        if (minute.current > 0) {
          return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
            style: [_styles.styles.text, textStyle, font()]
          }, `${minute.current}:${seconds.current.toString().length === 1 ? '0' : ''}${seconds.current}`);
        } else {
          return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
            style: [_styles.styles.text, textStyle, font()]
          }, `${seconds.current}`);
        }
      }
    } else {
      return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
        style: [_styles.styles.text, textStyle, font()]
      }, `${currentSeconds.current}`);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style,
    key: key
  }, renderTimer());
});
TimerComponent.defaultProps = defaultProps;
var _default = TimerComponent;
exports.default = _default;
//# sourceMappingURL=index.js.map